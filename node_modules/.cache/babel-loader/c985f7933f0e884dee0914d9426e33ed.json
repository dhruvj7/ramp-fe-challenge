{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport { fakeFetch } from \"../utils/fetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function useCustomFetch() {\n  _s();\n\n  const {\n    cache\n  } = useContext(AppContext);\n  const {\n    loading,\n    wrappedRequest\n  } = useWrappedRequest();\n  const fetchWithCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const cacheKey = getCacheKey(endpoint, params);\n    const cacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey);\n    console.log(\"cache -\", cacheResponse); // debugger;\n\n    if (cacheResponse) {\n      const data = JSON.parse(cacheResponse);\n      return data;\n    }\n\n    const result = await fakeFetch(endpoint, params);\n    cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(result));\n    return result;\n  }), [cache, wrappedRequest]); // const fetchWithoutCache = useCallback(\n  //   async <TData, TParams extends object = object>(\n  //     endpoint: RegisteredEndpoints,\n  //     params?: TParams\n  //   ): Promise<TData | null> =>\n  //     wrappedRequest<TData>(async () => {\n  //       const result = await fakeFetch<TData>(endpoint, params)\n  //       console.log(\"result in without cache-\",result)\n  //       return result\n  //     }),\n  //   [wrappedRequest]\n  // )\n\n  const fetchWithoutCache = useCallback(async (endpoint, params) => wrappedRequest(async () => {\n    const result = await fakeFetch(endpoint, params); //Updating Cache\n\n    cache === null || cache === void 0 ? void 0 : cache.current.forEach((value, key) => {\n      if (key.split(\"@\")[0] === \"paginatedTransactions\") {\n        let paginatedTransactionsData = JSON.parse(value);\n        paginatedTransactionsData.data.map(data => {\n          if (data.id === (params === null || params === void 0 ? void 0 : params.transactionId)) {\n            data.approved = params.value;\n          }\n        });\n        cache.current.set(key, JSON.stringify(paginatedTransactionsData));\n      }\n\n      if (key.split(\"@\")[0] === \"transactionsByEmployee\") {\n        console.log(JSON.parse(value), key.split(\"@\")[0]);\n        let transactionsByEmployeeData = JSON.parse(value);\n        transactionsByEmployeeData.map(data => {\n          if (data.id === (params === null || params === void 0 ? void 0 : params.transactionId)) {\n            data.approved = params.value;\n          }\n        });\n        cache.current.set(key, JSON.stringify(transactionsByEmployeeData));\n      }\n    });\n    return result;\n  }), [wrappedRequest]);\n  const clearCache = useCallback(() => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    cache.current = new Map();\n  }, [cache]);\n  const clearCacheByEndpoint = useCallback(endpointsToClear => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    const cacheKeys = Array.from(cache.current.keys());\n\n    for (const key of cacheKeys) {\n      const clearKey = endpointsToClear.some(endpoint => key.startsWith(endpoint));\n\n      if (clearKey) {\n        cache.current.delete(key);\n      }\n    }\n  }, [cache]);\n  return {\n    fetchWithCache,\n    fetchWithoutCache,\n    clearCache,\n    clearCacheByEndpoint,\n    loading\n  };\n}\n\n_s(useCustomFetch, \"j/MJvgyGdTYdw5q/fTHvRz37Zrc=\", false, function () {\n  return [useWrappedRequest];\n});\n\nfunction getCacheKey(endpoint, params) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`;\n}","map":{"version":3,"names":["useCallback","useContext","AppContext","fakeFetch","useWrappedRequest","useCustomFetch","cache","loading","wrappedRequest","fetchWithCache","endpoint","params","cacheKey","getCacheKey","cacheResponse","current","get","console","log","data","JSON","parse","result","set","stringify","fetchWithoutCache","forEach","value","key","split","paginatedTransactionsData","map","id","transactionId","approved","transactionsByEmployeeData","clearCache","undefined","Map","clearCacheByEndpoint","endpointsToClear","cacheKeys","Array","from","keys","clearKey","some","startsWith","delete"],"sources":["E:/ramp-fe-challenge/ramp-fe-challenge/src/hooks/useCustomFetch.ts"],"sourcesContent":["import { useCallback, useContext } from \"react\"\nimport { AppContext } from \"../utils/context\"\nimport { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\nimport { Transaction } from \"src/utils/types\"\nimport { SetTransactionApprovalParams } from \"src/utils/types\"\n\nexport function useCustomFetch() {\n  const { cache } = useContext(AppContext)\n  const { loading, wrappedRequest } = useWrappedRequest()\n\n  const fetchWithCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const cacheKey = getCacheKey(endpoint, params)\n        const cacheResponse = cache?.current.get(cacheKey)\n\n        console.log(\"cache -\",cacheResponse);\n        // debugger;\n\n        if (cacheResponse) {\n          const data = JSON.parse(cacheResponse)\n          return data as Promise<TData>\n        }\n\n        const result = await fakeFetch<TData>(endpoint, params)\n        cache?.current.set(cacheKey, JSON.stringify(result))\n        return result\n      }),\n    [cache, wrappedRequest]\n  )\n\n  // const fetchWithoutCache = useCallback(\n  //   async <TData, TParams extends object = object>(\n  //     endpoint: RegisteredEndpoints,\n  //     params?: TParams\n  //   ): Promise<TData | null> =>\n  //     wrappedRequest<TData>(async () => {\n  //       const result = await fakeFetch<TData>(endpoint, params)\n  //       console.log(\"result in without cache-\",result)\n  //       return result\n  //     }),\n  //   [wrappedRequest]\n  // )\n\n  const fetchWithoutCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData | null> =>\n      wrappedRequest<TData>(async () => {\n        const result = await fakeFetch<TData>(endpoint, params)\n        //Updating Cache\n        cache?.current.forEach((value, key) => {\n          if (key.split(\"@\")[0] === \"paginatedTransactions\") {\n            let paginatedTransactionsData: { nextPage: number; data: Transaction[] } = JSON.parse(value)\n            paginatedTransactionsData.data.map((data: Transaction) => {\n              if (data.id === (params as SetTransactionApprovalParams)?.transactionId) {\n                data.approved = (params as SetTransactionApprovalParams).value\n              }\n            })\n            cache.current.set(key, JSON.stringify(paginatedTransactionsData))\n          }\n          if (key.split(\"@\")[0] === \"transactionsByEmployee\") {\n            console.log(JSON.parse(value), key.split(\"@\")[0])\n            let transactionsByEmployeeData: Transaction[] = JSON.parse(value)\n            transactionsByEmployeeData.map((data: Transaction) => {\n              if (data.id === (params as SetTransactionApprovalParams)?.transactionId) {\n                data.approved = (params as SetTransactionApprovalParams).value\n              }\n            })\n            cache.current.set(key, JSON.stringify(transactionsByEmployeeData))\n          }\n        })\n\n        return result\n      }),\n    [wrappedRequest]\n  )\n\n  const clearCache = useCallback(() => {\n    if (cache?.current === undefined) {\n      return\n    }\n    cache.current = new Map<string, string>()\n  }, [cache])\n\n  const clearCacheByEndpoint = useCallback(\n    (endpointsToClear: RegisteredEndpoints[]) => {\n      if (cache?.current === undefined) {\n        return\n      }\n\n      const cacheKeys = Array.from(cache.current.keys())\n\n      for (const key of cacheKeys) {\n        const clearKey = endpointsToClear.some((endpoint) => key.startsWith(endpoint))\n\n        if (clearKey) {\n          cache.current.delete(key)\n        }\n      }\n    },\n    [cache]\n  )\n\n  return { fetchWithCache, fetchWithoutCache, clearCache, clearCacheByEndpoint, loading }\n}\n\nfunction getCacheKey(endpoint: RegisteredEndpoints, params?: object) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}