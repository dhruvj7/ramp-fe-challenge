{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithoutCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null) {\n        return response;\n      } //bug 4\n\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      }; // return { data: response.data, nextPage: response.nextPage }\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","response","fetchWithoutCache","page","nextPage","previousResponse","data","invalidateData"],"sources":["E:/ramp-fe-challenge/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n\n  const fetchAll = useCallback(async () => {\n    const response = await fetchWithoutCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      {\n        page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      }\n    )\n\n    setPaginatedTransactions((previousResponse) => {\n      if (response === null || previousResponse === null) {\n        return response\n      }\n\n      //bug 4\n      return { data: [...previousResponse.data , ...response.data], nextPage: response.nextPage }\n      // return { data: response.data, nextPage: response.nextPage }\n    })\n  }, [fetchWithCache, paginatedTransactions])\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null)\n  }, [])\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAIA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IACvC,MAAMS,QAAQ,GAAG,MAAMC,iBAAiB,CACtC,uBADsC,EAEtC;MACEC,IAAI,EAAEL,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACM;IADnE,CAFsC,CAAxC;IAOAL,wBAAwB,CAAEM,gBAAD,IAAsB;MAC7C,IAAIJ,QAAQ,KAAK,IAAb,IAAqBI,gBAAgB,KAAK,IAA9C,EAAoD;QAClD,OAAOJ,QAAP;MACD,CAH4C,CAK7C;;;MACA,OAAO;QAAEK,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA4B,GAAGL,QAAQ,CAACK,IAAxC,CAAR;QAAuDF,QAAQ,EAAEH,QAAQ,CAACG;MAA1E,CAAP,CAN6C,CAO7C;IACD,CARuB,CAAxB;EASD,CAjB2B,EAiBzB,CAACR,cAAD,EAAiBE,qBAAjB,CAjByB,CAA5B;EAmBA,MAAMS,cAAc,GAAGf,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEO,IAAI,EAAER,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDO;EAAlD,CAAP;AACD;;GA9BeZ,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}